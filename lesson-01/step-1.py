#tuple

t1 = (1, 1.5, True, 'string', (1,2,3))
# разделитель - это запятая, получение элемента по целочисленному индексу начиная с 0
print(t1[3])

#кортеж из одного элемента (запятая обязательна)
t2 = (546,) 

#в кортеж ничего доложить нельзя

#list

l1 = [(1,), [2], 'str']
print(l1[0]) # => (1,)
print(l1[0][0]) # => 1

l1[0] = False # элемент можно менять
print(l1[0]) # => False

#set

#элементы отсортированы и уникальны
 
s1 = {1,1,2,2,3,3}
s2 = set() # пустое множество

#dict

# неупорядоченное множество
d1 = {} # пустой словарь
d2 = {
    'id' : 1,
    'name' : 'Linus',
    'is_developer' : True,
    'skills' : ('C++', 'Linux'),
    'address' : {
        'street':'new'
    }
}

print(d2['id']) # => 1
print(d2['address']['street']) # => new
d2['any'] = 123

# Как определить тип данных переменной?
print(type(d1))

# Как выполнить явное приведение переменной к типу?
i = '666'
i = int(i)
print(i, type(i))

""" Типы данных бывают изменяемые и неизменяемые
immutable (неизменяемые)
- bool, int, float, str, complex, bytes, tuple
mutable (изменяемые)
- list, dict, set, object

Если a=b, то присваивается не копия, а ссылка на ту же область памяти 
"""

# Какие операторы существуют в Python?
"""
Операторы позволяют выполнять операции над переменными
Арифметические: + - * / %(остаток от деления) **(возведение в степень, степень может быть дробной) //(получение целой части после деления)
Сравнение: == != <>(тоже не равно) > < >= <=
Присваивание: = += -= *= %= **= //= 
Логические: and or not
Побитовые:  & | ~(инверсия) ^(XOR) << >>
Принадлежности: in(включает) 
		not in (не включает)
Тождественности: is 
		not is
С None всегда только оператор тождественности, а не ==
"""

#Ветвление
a = 1
b = 2

if a < b:
    print('a < b')
elif a == b:
    print('a = b')
elif a is b:
    pass # пустой блок кода
else:
    print('a > b')

# Тернарный оператор

if True:
    username = 'Вася'
else:
    username = 'Петя'

#равно
username = 'Вася' if True else 'Петя'

#Циклы

i = 0
while 1: 
    i += 1
    if i % 2:
        continue # пропускает текущую итерацию (осуждается)    
    
    print(i)
    
    if i == 10:
        break # мгновенное завершение цикла
   

lst = [1, 2, 3]
for i in lst
    print('Элемент списка:', i)

for key, value in enumerate(range(5)) # от 0 до 4
    print(key, value)

#range(10, 15) от 10 до 14
#range(10, 21, 2) 10 12 14 16 18 20

#a,b = (1, 2) распаковка кортежа => a,b = b,a

for i in d2
    print(i) #распечатает только ключи

for key, value in d2.items()
    print(key, value) #распечатает кортежи ключ-значение

# Срезы
s = 'Hello, Python'
s[0] # => 'H'
s[0:5] # => 'Hello'
s[:5]
s[7:] # => 'Python'
s[::2] # =>
s[::-2] # => '!otP,le'

#Срезы работают и для строк, и для списков
#копия списка
lst1 = list(range(10))
lst2 = lst1[::] # => будет копия, т.е. == True, is False

"""
Функции для работы со списками и методы списков
len(lst) - длина списка
l.append(e) - добавить элемент в конец списка
l.insert(index, e) - добавить элемент в указанную позицию
pythonworld.ru

"""
#сделать строку из символов через список
s =[]

for c in range(ord('a'), ord('z') +1):
    s.append(chr(c))

print(''.join(s))

int(input()) - ввод данных
